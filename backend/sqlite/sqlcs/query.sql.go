// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package sqlcs

import (
	"context"
	"database/sql"
	"time"
)

const findSessionByToken = `-- name: FindSessionByToken :one
SELECT id, user_id, token, token_expired_at, created_at, updated_at FROM user_sessions WHERE token = ?
`

func (q *Queries) FindSessionByToken(ctx context.Context, token string) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, findSessionByToken, token)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.TokenExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, "name", password_hash, verify_token, "status", last_login_at, archived, created_at, updated_at FROM users WHERE email = ?1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, "name", password_hash, verify_token, "status", last_login_at, archived, created_at, updated_at FROM users WHERE id = ?1
`

func (q *Queries) FindUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findUserRetryCountByUserID = `-- name: FindUserRetryCountByUserID :one
SELECT id, user_id, retry_count, last_retry_at, created_at FROM user_retry_counts WHERE user_id = ? LIMIT 1
`

func (q *Queries) FindUserRetryCountByUserID(ctx context.Context, userID string) (UserRetryCount, error) {
	row := q.db.QueryRowContext(ctx, findUserRetryCountByUserID, userID)
	var i UserRetryCount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RetryCount,
		&i.LastRetryAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :one
INSERT INTO user_sessions (id, user_id, token, token_expired_at, created_at, updated_at)
VALUES (?1, ?2, ?3, ?4, ?5, ?6)
RETURNING id, user_id, token, token_expired_at, created_at, updated_at
`

type InsertSessionParams struct {
	ID             string
	UserID         string
	Token          string
	TokenExpiredAt time.Time
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, insertSession,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.TokenExpiredAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.TokenExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, email, "name", "status",  password_hash, verify_token, created_at, updated_at)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
RETURNING id, email, "name", password_hash, verify_token, "status", last_login_at, archived, created_at, updated_at
`

type InsertUserParams struct {
	ID           string
	Email        string
	Name         string
	Status       string
	PasswordHash string
	VerifyToken  string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Status,
		arg.PasswordHash,
		arg.VerifyToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertUserRetryCount = `-- name: InsertUserRetryCount :one
INSERT INTO user_retry_counts (id, user_id, retry_count, last_retry_at, created_at)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id, user_id, retry_count, last_retry_at, created_at
`

type InsertUserRetryCountParams struct {
	ID          string
	UserID      string
	RetryCount  int64
	LastRetryAt sql.NullTime
	CreatedAt   time.Time
}

func (q *Queries) InsertUserRetryCount(ctx context.Context, arg InsertUserRetryCountParams) (UserRetryCount, error) {
	row := q.db.QueryRowContext(ctx, insertUserRetryCount,
		arg.ID,
		arg.UserID,
		arg.RetryCount,
		arg.LastRetryAt,
		arg.CreatedAt,
	)
	var i UserRetryCount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RetryCount,
		&i.LastRetryAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSession = `-- name: UpdateSession :one
UPDATE user_sessions 
SET 
    token = ?1, 
    token_expired_at = ?2,
    updated_at = ?3
WHERE id = ?4 RETURNING id, user_id, token, token_expired_at, created_at, updated_at
`

type UpdateSessionParams struct {
	Token          string
	TokenExpiredAt time.Time
	UpdatedAt      time.Time
	ID             string
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, updateSession,
		arg.Token,
		arg.TokenExpiredAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.TokenExpiredAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    email = ?1,
    "name" = ?2,
    "status" = ?3,
    password_hash = ?4,
    updated_at = ?5
WHERE id = ?6 RETURNING id, email, "name", password_hash, verify_token, "status", last_login_at, archived, created_at, updated_at
`

type UpdateUserParams struct {
	Email        string
	Name         string
	Status       string
	PasswordHash string
	UpdatedAt    time.Time
	ID           string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.Name,
		arg.Status,
		arg.PasswordHash,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.VerifyToken,
		&i.Status,
		&i.LastLoginAt,
		&i.Archived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserRetryCount = `-- name: UpdateUserRetryCount :one
UPDATE user_retry_counts
SET 
    retry_count = ?1,
    last_retry_at = ?2
WHERE id = ?3 
RETURNING id, user_id, retry_count, last_retry_at, created_at
`

type UpdateUserRetryCountParams struct {
	RetryCount  int64
	LastRetryAt sql.NullTime
	ID          string
}

func (q *Queries) UpdateUserRetryCount(ctx context.Context, arg UpdateUserRetryCountParams) (UserRetryCount, error) {
	row := q.db.QueryRowContext(ctx, updateUserRetryCount, arg.RetryCount, arg.LastRetryAt, arg.ID)
	var i UserRetryCount
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RetryCount,
		&i.LastRetryAt,
		&i.CreatedAt,
	)
	return i, err
}
